{"version":3,"file":"static/js/208.9d3499e1.chunk.js","mappings":"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","sources":["../node_modules/viem/src/errors/ccip.ts","../node_modules/viem/src/utils/ccip.ts","../node_modules/viem/src/utils/address/isAddressEqual.ts"],"sourcesContent":["import type { Address } from 'abitype'\n\nimport type { Hex } from '../types/misc.js'\nimport { stringify } from '../utils/stringify.js'\n\nimport { BaseError } from './base.js'\nimport { getUrl } from './utils.js'\n\nexport class OffchainLookupError extends BaseError {\n  override name = 'OffchainLookupError'\n  constructor({\n    callbackSelector,\n    cause,\n    data,\n    extraData,\n    sender,\n    urls,\n  }: {\n    callbackSelector: Hex\n    cause: BaseError\n    data: Hex\n    extraData: Hex\n    sender: Address\n    urls: readonly string[]\n  }) {\n    super(\n      cause.shortMessage ||\n        'An error occurred while fetching for an offchain result.',\n      {\n        cause,\n        metaMessages: [\n          ...(cause.metaMessages || []),\n          cause.metaMessages?.length ? '' : [],\n          'Offchain Gateway Call:',\n          urls && [\n            '  Gateway URL(s):',\n            ...urls.map((url) => `    ${getUrl(url)}`),\n          ],\n          `  Sender: ${sender}`,\n          `  Data: ${data}`,\n          `  Callback selector: ${callbackSelector}`,\n          `  Extra data: ${extraData}`,\n        ].flat(),\n      },\n    )\n  }\n}\n\nexport class OffchainLookupResponseMalformedError extends BaseError {\n  override name = 'OffchainLookupResponseMalformedError'\n  constructor({ result, url }: { result: any; url: string }) {\n    super(\n      'Offchain gateway response is malformed. Response data must be a hex value.',\n      {\n        metaMessages: [\n          `Gateway URL: ${getUrl(url)}`,\n          `Response: ${stringify(result)}`,\n        ],\n      },\n    )\n  }\n}\n\nexport class OffchainLookupSenderMismatchError extends BaseError {\n  override name = 'OffchainLookupSenderMismatchError'\n  constructor({ sender, to }: { sender: Address; to: Address }) {\n    super(\n      'Reverted sender address does not match target contract address (`to`).',\n      {\n        metaMessages: [\n          `Contract address: ${to}`,\n          `OffchainLookup sender address: ${sender}`,\n        ],\n      },\n    )\n  }\n}\n","import type { Abi, Address } from 'abitype'\n\nimport { type CallParameters, call } from '../actions/public/call.js'\nimport type { Transport } from '../clients/transports/createTransport.js'\nimport { type BaseError } from '../errors/base.js'\nimport {\n  OffchainLookupError,\n  OffchainLookupResponseMalformedError,\n  OffchainLookupSenderMismatchError,\n} from '../errors/ccip.js'\nimport { HttpRequestError } from '../errors/request.js'\nimport type { Chain } from '../types/chain.js'\nimport type { GetErrorArgs } from '../types/contract.js'\nimport type { Hex } from '../types/misc.js'\n\nimport type { Client } from '../clients/createClient.js'\nimport { decodeErrorResult } from './abi/decodeErrorResult.js'\nimport { encodeAbiParameters } from './abi/encodeAbiParameters.js'\nimport { isAddressEqual } from './address/isAddressEqual.js'\nimport { concat } from './data/concat.js'\nimport { isHex } from './data/isHex.js'\nimport { stringify } from './stringify.js'\n\nexport const offchainLookupSignature = '0x556f1830'\nexport const offchainLookupAbiItem = {\n  name: 'OffchainLookup',\n  type: 'error',\n  inputs: [\n    {\n      name: 'sender',\n      type: 'address',\n    },\n    {\n      name: 'urls',\n      type: 'string[]',\n    },\n    {\n      name: 'callData',\n      type: 'bytes',\n    },\n    {\n      name: 'callbackFunction',\n      type: 'bytes4',\n    },\n    {\n      name: 'extraData',\n      type: 'bytes',\n    },\n  ],\n} as const satisfies Abi[number]\n\nexport async function offchainLookup<TChain extends Chain | undefined,>(\n  client: Client<Transport, TChain>,\n  {\n    blockNumber,\n    blockTag,\n    data,\n    to,\n  }: Pick<CallParameters, 'blockNumber' | 'blockTag'> & {\n    data: Hex\n    to: Address\n  },\n): Promise<Hex> {\n  const { args } = decodeErrorResult({\n    data,\n    abi: [offchainLookupAbiItem],\n  }) as unknown as GetErrorArgs<\n    [typeof offchainLookupAbiItem],\n    'OffchainLookup'\n  >\n  const [sender, urls, callData, callbackSelector, extraData] = args\n\n  try {\n    if (!isAddressEqual(to, sender))\n      throw new OffchainLookupSenderMismatchError({ sender, to })\n\n    const result = await ccipFetch({ data: callData, sender, urls })\n\n    const { data: data_ } = await call(client, {\n      blockNumber,\n      blockTag,\n      data: concat([\n        callbackSelector,\n        encodeAbiParameters(\n          [{ type: 'bytes' }, { type: 'bytes' }],\n          [result, extraData],\n        ),\n      ]),\n      to,\n    } as CallParameters)\n\n    return data_!\n  } catch (err) {\n    throw new OffchainLookupError({\n      callbackSelector,\n      cause: err as BaseError,\n      data,\n      extraData,\n      sender,\n      urls,\n    })\n  }\n}\n\nexport async function ccipFetch({\n  data,\n  sender,\n  urls,\n}: { data: Hex; sender: Address; urls: readonly string[] }) {\n  let error = new Error('An unknown error occurred.')\n\n  for (let i = 0; i < urls.length; i++) {\n    const url = urls[i]\n    const method =\n      url.includes('{sender}') || url.includes('{data}') ? 'GET' : 'POST'\n    const body = method === 'POST' ? { data, sender } : undefined\n\n    try {\n      const response = await fetch(\n        url.replace('{sender}', sender).replace('{data}', data),\n        {\n          body: JSON.stringify(body),\n          method,\n        },\n      )\n\n      let result\n      if (\n        response.headers.get('Content-Type')?.startsWith('application/json')\n      ) {\n        result = (await response.json()).data\n      } else {\n        result = (await response.text()) as any\n      }\n\n      if (!response.ok) {\n        error = new HttpRequestError({\n          body,\n          details: stringify(result.error) || response.statusText,\n          headers: response.headers,\n          status: response.status,\n          url,\n        })\n        continue\n      }\n\n      if (!isHex(result)) {\n        error = new OffchainLookupResponseMalformedError({\n          result,\n          url,\n        })\n        continue\n      }\n\n      return result\n    } catch (err) {\n      error = new HttpRequestError({\n        body,\n        details: (err as Error).message,\n        url,\n      })\n    }\n  }\n\n  throw error\n}\n","import type { Address } from 'abitype'\n\nimport { InvalidAddressError } from '../../errors/address.js'\n\nimport { isAddress } from './isAddress.js'\n\nexport function isAddressEqual(a: Address, b: Address) {\n  if (!isAddress(a)) throw new InvalidAddressError({ address: a })\n  if (!isAddress(b)) throw new InvalidAddressError({ address: b })\n  return a.toLowerCase() === b.toLowerCase()\n}\n"],"names":["OffchainLookupError","BaseError","constructor","callbackSelector","cause","data","extraData","sender","urls","super","shortMessage","metaMessages","length","map","url","getUrl","flat","Object","OffchainLookupResponseMalformedError","result","stringify","OffchainLookupSenderMismatchError","to","offchainLookupSignature","offchainLookupAbiItem","name","type","inputs","async","offchainLookup","client","blockNumber","blockTag","args","decodeErrorResult","abi","callData","a","b","isAddress","InvalidAddressError","address","toLowerCase","isAddressEqual","ccipFetch","data_","call","concat","encodeAbiParameters","err","error","Error","i","method","includes","body","undefined","response","fetch","replace","JSON","headers","get","startsWith","json","text","ok","HttpRequestError","details","statusText","status","isHex","message"],"sourceRoot":""}